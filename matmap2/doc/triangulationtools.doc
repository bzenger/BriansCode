<big><big> Documentation for the TRIANGULATIONTOOLS directory </big></big><br>Contents: automaticly generated doucmentation <br>Filename: triangulationtools.doc <br>Creation date: 05-May-2004 <br><br><br> <big><big> Contents </big></big> <br><a href="#ref1">CheckTriangulation</a><br><a href="#ref2">TriangulateNC</a><br><a href="#ref3">triAlignFacPts</a><br><a href="#ref4">triClockWise</a><br><a href="#ref5">triFindNeighbor</a><br><a href="#ref6">triFitCircle</a><br><a href="#ref7">triLaplacianInterpolation</a><br><a href="#ref8">triMergeNodes</a><br><a href="#ref9">triReOrderPts</a><br><a href="#ref10">triRotMatrix4</a><br><a href="#ref11">triSliceSurface</a><br><a href="#ref12">triSortSlices</a><br><a href="#ref13">triSplitInPlanes</a><br><a href="#ref14">triSurfaceLaplacian</a><br><a href="#ref15">triTriangulate</a><br><a href="#ref16">triVector3</a><br><a href="#ref17">triVector4</a><br><br><br><a name="ref1"></a><br><big><big>CheckTriangulation</big></big><br><br><pre>  This function checks if the triangulation went OK
</pre><a name="ref2"></a><br><big><big>TriangulateNC</big></big><br><br><pre>  function Boundary = SlicesToPos(Slices)
  This function converts data obtained from slices
  in a three dimensional image build out of triangles
  the routine uses a simple algorithm 
</pre><a name="ref3"></a><br><big><big>triAlignFacPts</big></big><br><br><pre>  function [Pts,Fac] = triAlignFacPts(OldPts,Pts,Fac)
 
  This function rearranges an Pts and Fac matrix so the order in the
  matrices matches that of the order given in the OldPts matrix
  the function assumes oldPts and Pts to derive from the same dataset of points
  although small deviations may occur between the nodes. The function uses a
  basic distance criterium to match points. So no translation or rotation is allowed
  at this point. (Perhaps some future version will do). 
  furthermore the functions does everything so you can still use the old mapping files
  
  see ioWriteFac ioWritePts ioReadPts ioReadfac
</pre><a name="ref4"></a><br><big><big>triClockWise</big></big><br><br><pre>  FUNCITON fac = triClockWise(fac,pts)
 
  DESCRIPTION
  Correct a triangulation and make all triangles CW
  
  INPUT
  fac     Triangulation data
  pts     Points file
  
  OUTPUT
  fac     The new triangulation file
 
</pre><a name="ref5"></a><br><big><big>triFindNeighbor</big></big><br><br><pre></pre><a name="ref6"></a><br><big><big>triFitCircle</big></big><br><br><pre>  FUNCTION [r,center] = triFitCircle(pts)
 
  DESCRIPTION
  This function fits a circle through the points and tries to
  minimise the distance between the points and the circle in a
  least squares sence
 
  INPUT
  pts     2D points array
  
  OUTPUT
  r       radius of circle
  center  the center of the circle
 
  SEE ALSO -
</pre><a name="ref7"></a><br><big><big>triLaplacianInterpolation</big></big><br><br><pre>  FUNCTION Lint = triLaplacianInterpolation(surface,badleads,[numleads])
 
  DESCRIPTION
  This function computes a transfer matrix from the full potential vector
  with the potentials of the badleads to a full vector in which the
  bad leads have been interpolated using the known data. THhe function 
  uses the laplacian interpolation scheme (Ootendorp 1989, J Computational 
  Physics 80,331-343).
 
   Utot_int = Lint*Utot_old
 
  INPUT
  surface     A surface description with fields .pts/.channels and .fac
  badleads    The leads you want to interpolate
  numleads    Number of leads, As the total number of leads is not
              available from the channels file this separate entry
              will define the dimensions of Lint. If you do not use
              .chaannel files the function won't need this input
 
  OUTPUT
  Lint        The interpolation matrix
 
  SEE ALSO triSurfaceLaplacian
</pre><a name="ref8"></a><br><big><big>triMergeNodes</big></big><br><br><pre>  FUNCTION [Pts,Fac,Channels] = triMergeNodes(Pts,Fac,Node1,Node2,Channels)
 
  DESCRIPTION
  Merge two points in an existing mesh.
 
  INPUT
     Pts,Fac     define the original mesh
     Node1,Node2 are the nodes to be merged, in the process Node2 will be removed
 
  OUTPUT
     Pts,Fac     the new mesh
</pre><a name="ref9"></a><br><big><big>triReOrderPts</big></big><br><br><pre>  function [Order,IOrder] = triReOrderPts(PtsOld,PtsNew)
 
  This function matches by looking at the minimum distance
  which column of the old pts-file matches the new one
 
  Order the way the PtsNew file is order assuming the OldOne as standard
 
</pre><a name="ref10"></a><br><big><big>triRotMatrix4</big></big><br><br><pre>  function RM = triRotMatrix4(Origin,Normal)
 
  This function creates an opengl like matrix rotating
  around the origin and pointing the normal along the z-axis
 
  RM is the rotation matrix (4x4)
</pre><a name="ref11"></a><br><big><big>triSliceSurface</big></big><br><br><pre>  FUNCTION surface = triSliceSurface(surface,origin,normal,options)
 
  DESCRIPTION
  This function slices a model in two and only keeps one part and fills up
  the sliced part
 
  INPUT
  surface     surface to be sliced
  origin      a point on the cutting plane
  normal      a normal to the cutting plane pointing outward
  
  OPTIONS
  'fill',distance   
              fill the cutting plane and use distance as a measure for a regular grid
 
  OUTPUT
  surface     new surface
 
  SEE ALSO -
</pre><a name="ref12"></a><br><big><big>triSortSlices</big></big><br><br><pre>  function Slices = triSortSlices(Pos,Slices,Normal,[Origin])
 
  This function sorts the points collected in one slice to rotate in an orderly fashion
  around a central point.
 
  INPUT
   Pos    - Matrix containing the node positions;
   Slices - the cell array that contains the indices of the nodes that form one contour
   Normal - Normal to the plane in which the the nodes need to be ordered
   Origin - Origin from which the rotation and radius of the points of the curve should be calculated
            default - The gravitational center of the cloud of points contained in one slice
 
  OUTPUT
   Slices - A cell array in which the indices are nicely ordered
 
  The algorithm is pretty easy. It just determines the angle and the radius of the points and
  uses the angle to sort the points
</pre><a name="ref13"></a><br><big><big>triSplitInPlanes</big></big><br><br><pre>  function CPos = triSplitInPlanes(Pos, Origin, Normal, Step)
 
  this function splits the data into splices and just looks in which 
  slice the nodes should be.
 
  using a least squares fit the distance to planes is determined, and the point
  is grouped in the plane to which it is closest
 
  INPUT
  Pos - position file (pts file)
  Origin - Where to start (vector)
  Normal - Where are the vectors normal to (vector)
  Step   - Vector describing where along this normal planes have to be centered 
 
  OUTPUT
  CPos, Cell array with in each cell indeces to a group of points in the same plane
</pre><a name="ref14"></a><br><big><big>triSurfaceLaplacian</big></big><br><br><pre>  FUNCTION L = triSurfaceLaplacian(surface)
 
  DESCRIPTION
  This function computes the surface laplacian matrix for a given 
  surface.
 
  INPUT
  surface         Surface to be used in laplacian operation
 
  OUTPUT
  L               Surface laplacian matrix
 
  SEE ALSO
</pre><a name="ref15"></a><br><big><big>triTriangulate</big></big><br><br><pre>  function Tri = triTriangulate(Pos,Slices)
 
  This is a simple triangulation algorithm
  It takes to sequential rings of the model and
  adds a surface in between. 
 
  INPUT
    Pos -  A matrix containing all node positions
    Slices -  A cell array. Every cell contains a vector of indices to the nummer of nodes
              contained in one ring. For the algorithm to work properly, one needs to supply the 
              the rings in an order they can be triangulated
 
 
  OUTPUT
    Tri  - Matrix containing the triangulated data
</pre><a name="ref16"></a><br><big><big>triVector3</big></big><br><br><pre>  function Pos3 = triVector3(Pos4)
 
  Strip the fourth redundant coordinate
  and go back to the cartesian coordinate system
 
  INPUT
  Pos4 - matrix with four vectors
 
  OUTPUT
  Pos3 - matrix with three vectors
</pre><a name="ref17"></a><br><big><big>triVector4</big></big><br><br><pre>  function Pos4 = triVector4(Pos3)
 
  This function transforms a normal matrix containing the position in three
  coordinates into a opengl-style four vector matrix.
  The difference is that the last position is used as a scaling number
  The latter makes a translation a matrix multiplication as well
  Hence all transformations on 4-vector can be described as matrix multiplications
 
  INPUT 
  Pos3 - matrix with a three cartesian coordinates per column
 
  OUTPUT 
  Pos4 - matrix with four cartesian coordinates per column
</pre>