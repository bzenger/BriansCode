<big><big> Documentation for the BEM directory </big></big><br>Contents: automaticly generated doucmentation <br>Filename: bem.doc <br>Creation date: 04-Jun-2004 <br><br><br> <big><big> Contents </big></big> <br><a href="#ref1">General Description</a><br><a href="#ref2">anaSolveSphere</a><br><a href="#ref3">bemCheckModel</a><br><a href="#ref4">bemEEMatrix</a><br><a href="#ref5">bemEJMatrix</a><br><a href="#ref6">bemGenerateSphere</a><br><a href="#ref7">bemGenerateSphericalMesh</a><br><a href="#ref8">bemMatrixPP</a><br><a href="#ref9">bemMatrixPP2</a><br><a href="#ref10">bemPlotSurface</a><br><a href="#ref11">bemValidate</a><br><a href="#ref12">errMAG</a><br><a href="#ref13">errRDM</a><br><a href="#ref14">errRDMS</a><br><a href="#ref15">errRMS</a><br><br><br><a name="ref1"></a><big><big>General Description</big></big><br><pre>CONTENTS BOUNDARY ELEMENT METHOD DIRECTORY

The following files are present

anaSolveSphere      - my analytical solver for spherical geometries for validating the methods used
bemCheckModel       - to check and validate a model's geometry
bemEEMatrix         - Create the potential to potential integral equations (sub function of bemMatrixPP)
bemEJMatrix         - Create the current density to options integral equations (sub function of bemMatrixPP as well)
bemGenerateSphere   - Create a spherical model for testing the accuracy of the boundary element method
bemMatrixPP         - Compute the boundary element method transfer matrix from potential at inner surface to the one at the outer surface
bemPlotSurface      - A simple function to plot the geometries and potential distributions using matlab's graphics tools
bemValidate         - A script for validating the boundary element method using spherical geometries
errMAG              - Magnifiction error norm
errRDM              - The relative difference measure error norm
errRDMS             - The relative difference measure* error, same as RDM only not susceptible to magnification errors
errRMS              - The RMS error measure
triCCW              - Make a surface CCW (sub function of bemCheckModel)

CURRENT STATE OF SOFTWARE
The bem works well for phantom spherical data, however still some significant magnification errors occur when applying it to the
cage data. I suspect it is due to an not exact fitting of the datapoints of the cage in the total geometry. The nodes may be off by
5 or even 10mm. Since the cage is not completely rigid another problem is that the shape of the cage may have altered a little from
experiment to discretisation. The cage was discretisized in two stages, combining the data resulted in the given geometry, but between
both sets already some differences were seen order f a few millimetres. The cage is not a solid entity but consists of two halves that are
put around the heart and they can move a little in respect to eachother. Another concern is the discretisation, the electrodes are folded around
a grid and the node points were taken from the outside, but in fact most electrodes have a contact surface that stretches from inside to outside of
the grid on which the were wound.
</pre><a name="ref2"></a><br><big><big>anaSolveSphere</big></big><br><br><pre>  FUNCTION U = anaSolveSphere(option,Pos,DipPos,DipStr,Radius,Sigma,n)
  
  DESCRIPTION
  This general function evaluates almost "everyting" for a multilayer sphere
 
  The potential is evaluate using an expansion in n Legendre polynomials, the current 
  density mapping uses a derivative of this expansion in polynomials. The magnetic field is
  computed using an analytical expression.
 
  For the Magnetic field Radius and Sigma need to be supplied although they do not influence the 
  outcome, n does not need to be specified either.
  The Magnetic field is computed using the Magnetic potential outside the source regions
  The solution is therefore only valid outside the volume
 
  The Current density will only give a valid result inside the modelling space and the potential
  will produce valid values everywhere, both inside and outside the volume conductor.
 
  The Potential and the current density are evaluated using an expansion in Legendre polynomials. 
  The more, the more accurate the result will be.
 
  Choose option 'B' for magnetic field, 'U' for potential and 'J' for current density
 
  INPUT
  option     'U', 'B' or 'J'
  Pos         Positions [3xM] at which U, J or B needs to be evaluated
  DipPos      Position of Dipole needs to be in inner sphere (except for magnetic field)
  DipStr      Dipole strength (a vector with three components)
  Radius      Radii of the spheres from inside to outside
  Sigma       Conductivities in same order
  n           Number of Legendre polynomials to evaluate for potential (optional)
              default value for n = 40;
              All vectors are rotate if needed, so do not bother about the format.
  
  OUTPUT      
  U           The potential U, the current density J or the magnetic field B
 
</pre><a name="ref3"></a><br><big><big>bemCheckModel</big></big><br><br><pre>  FUNCTION model = CheckModel(model,mode)
 
  DESCRIPTION
  This function checks the integrity of the model matrix
  It checks whehter all fields are present, it checks and
  corrects the sizes of the fac and pts matrices and it 
  checks the triangulation for any inconsistancies.
  Although it runs a lot of checks the list is far from complete
 
  INPUT
  model       The model that needs checking
  mode        'closed' or 'open' default = 'closed'
              Whether the model surfaces are open or closed
 
  OUTPUT
  model       In case the mistakes could be corrected, this
              matrix contains the corrected fields
 
  CHECKS:
  - Is the surface closed ?
  - Is a node used twice in a triangle ?
  - Is every triangle oriented the same way ?
  - Has the model struct all fields necessairy ?
  - Is the surface structure complete ?
  - Is the surface CCW or CW ?
  - Do the matrices have the correct dimensions ?
  - Does the fac matrix contain valid node indices ?
 
  SOME THINGS THAT ARE NOT CHECKED (YET):
  - Do surfaces intersect ?
  - Are there surfaces with no surface area (two node coincide, but are properly triangulated) ?
 
</pre><a name="ref4"></a><br><big><big>bemEEMatrix</big></big><br><br><pre>  FUNCTION [EE,row,col] = bemEEMatrix(model,surf1,surf2)
 
  DEESCRIPTION
  This function computes the transfer matrix for potentials in the boundary element formulation
  Each potential can be written as a sum of contributions of normal current densities and potentials
  at each surface. This function computes the transfer between potentials
  For instance the boundary element is formulated as
   EE*[p1 p2]' + EJ*[j1 j2]' = 0
  In this equation this function computes the EE matrix. It also computes the auto angles if they are
  present.
 
  INPUT
  model    model descriptor (struct with fields)
  surf1    the surface potential at the row space (denoted in surface numbers)
  surf2    the surface potential at the column space (denoted in surface numbers)
 
  OUTPUT
  EE       submatrix of boundary element method
  row     vector containing the surface numbers of each row
  col     vector containing the surface numbers of each column
 
  MODEL
  .surface{p}
     .pts      pts matrix [3xn]
     .fac      fac matrix [3x 2(n-2)]
     .sigma    [cond(outside) cond(inside)]
 
  SEE ALSO bemEJMatrix, bemJEMatrix, bemJJMatrix
</pre><a name="ref5"></a><br><big><big>bemEJMatrix</big></big><br><br><pre>  FUNCTION [EJ,row,col] = bemEJMatrix(model,surf1,surf2,mode)
 
  DEESCRIPTION
  This function computes the transfer matrix for potentials in the boundary element formulation
  from the normal current density.
  Each potential can be written as a sum of contributions of normal current densities and potentials
  at each surface. This function computes the transfer between potentials
  For instance the boundary element is formulated as
   EE*[p1 p2]' + EJ*[j1 j2]' = 0
  In this equation this function computes the EJ matrix. 
 
  INPUT
  model    model descriptor (struct with fields)
  surf1    the surface potential at the row space (denoted in surface numbers)
  surf2    the surface potential at the column space (denoted in surface numbers)
  mode     'lin' or 'const' : The interpolation function at a triangle
 
  OUTPUT
  EJ       submatrix of boundary element method
  row      vector containing the surface number for each row
  col      vector containing the surface number for each column
 
 
  SEE ALSO bemEEMatrix, bemJEMatrix, bemJJMatrix
</pre><a name="ref6"></a><br><big><big>bemGenerateSphere</big></big><br><br><pre>  FUNCTION model = bemGenerateSphere(radius,conductivity,d)
 
  DESCRIPTION
  This function generates a spherical model for testing the boundary
  element code.
 
  INPUT
  radius         [outermost ... innermost ]
  conductivity   [outside .. inside]  (length is Radius + 1)
  d              Discretisation level (normalised)
</pre><a name="ref7"></a><br><big><big>bemGenerateSphericalMesh</big></big><br><br><pre>  FUNCTION surface = bemGenerateSphericalMesh(D);
 
  DESCRIPTION
  This function generates a sphere and creates a triangulted surface
  D is a measure for the resolution of the sphere
  The sphere being generated is a unity sphere
</pre><a name="ref8"></a><br><big><big>bemMatrixPP</big></big><br><br><pre>  FUNCTION T = bemMatrixPP(model)
 
  DESCRIPTION
  This function computes the transfer matrix between the inner and
  the most outer surface. It is assumed that surface 1 is the outer
  most surface and surface N the inner most. At the outermost surface
  a Neumann condition is assumed that no currents leave the model.
 
  INPUT 
  model       The model description
 
  OUTPUT
  T           The transfer matrix from inside to outside
 
  STRUCTURE DEFINITIONS
  model
   .surface{p}           A cell array containing the different surfaces that form the model
                         These surfaces are numbered from the outside to the inside
       .pts              A 3xN matrix that describes all node positions
       .fac              A 3xM matrix that describes which nodes from one triangle
                         Each trianlge is represented by one column of this matrix
       .sigma            The conductivity inside and outside of this boundary
                         The first element is the conductivity outside and the second the one inside
       .cal              The vector describes the calibration of the potential the nodes in this vector
                         will be summed to zero in the deflation process.
 
  NOTE The fields mentioned here are the fields the program uses for its computation purposes. However
       more fields may be present that resulted from other programs, like channels files etc. These fields
       will be ignored by the current program
 
  STABILITY
  The program is still in a testing phase and some features have not been tested thoroughly. Please report
  any bugs you encounter.
 
  FUTURE WORK
  - Test/expand the capabilities for doing more than two surfaces
  - Add options to switch on or off the radon integration and support full analytical
    as well as radon integral solutions
  - Need to add some more features on computing the auto solid angles. At the moment the notion of an eigen value 0
     is used to computed these auto solid angles (angle computed from a point on the triangle itself).
  - Upgrade some old code that computes the current density using the bem method rather than taking a numerical gradient
 
</pre><a name="ref9"></a><br><big><big>bemMatrixPP2</big></big><br><br><pre>  FUNCTION T = bemMatrixPP(model)
 
  DESCRIPTION
  This function computes the transfer matrix between the inner and
  the most outer surface. It is assumed that surface 1 is the outer
  most surface and surface N the inner most. At the outermost surface
  a Neumann condition is assumed that no currents leave the model.
 
  INPUT 
  model       The model description
 
  OUTPUT
  T           The transfer matrix from inside to outside
 
  STRUCTURE DEFINITIONS
  model
   .surface{p}           A cell array containing the different surfaces that form the model
                         These surfaces are numbered from the outside to the inside
       .pts              A 3xN matrix that describes all node positions
       .fac              A 3xM matrix that describes which nodes from one triangle
                         Each trianlge is represented by one column of this matrix
       .sigma            The conductivity inside and outside of this boundary
                         The first element is the conductivity outside and the second the one inside
       .cal              The vector describes the calibration of the potential the nodes in this vector
                         will be summed to zero in the deflation process.
 
  NOTE The fields mentioned here are the fields the program uses for its computation purposes. However
       more fields may be present that resulted from other programs, like channels files etc. These fields
       will be ignored by the current program
 
  STABILITY
  The program is still in a testing phase and some features have not been tested thoroughly. Please report
  any bugs you encounter.
 
  FUTURE WORK
  - Test/expand the capabilities for doing more than two surfaces
  - Add options to switch on or off the radon integration and support full analytical
    as well as radon integral solutions
  - Need to add some more features on computing the auto solid angles. At the moment the notion of an eigen value 0
     is used to computed these auto solid angles (angle computed from a point on the triangle itself).
  - Upgrade some old code that computes the current density using the bem method rather than taking a numerical gradient
 
</pre><a name="ref10"></a><br><big><big>bemPlotSurface</big></big><br><br><pre>  FUNCTION Handle = bemPlotSurface([Figure],Surface,U,options,...)
 
  DESCRIPTION
  This function plots a triangulated surface and projects the surface potential
  on top of it.
 
  INPUT
  Figure           Figure handle in which to plot the data (default is the current figure)
  Surface          The surface to plot
  U                The potential data of the surface (a vector containing the potential for all nodes)
  options          Additional options see OPTIONS
 
  OUTPUT
  Handle           A vector to the handle of all graphicss objects used in the plot
 
  OPTIONS
  Possible options, formatted as 'option',value1,value2 and so on
  These options can be added to the end of the input
 
  The following options are available 
   'limit',Origin,Normal   - Limits the display to half space defined by a plane
                             Origin and normal define the plane that is used for cutting the model
   'contour',Contour       - Plot contour lines at value specified in Contour
                             Contour is a vector with the potentials for each ispotential line.
                             e.g. Contour = 1:5 will generate five isopotential lines at a value of 1,2,3,4 and 5
   'blue'                  - PPT style graph used to make the output suitable for powerpoint. A blue background
                             and no axis
   'alpha',alphavalue      - Make the surface transparant using the alphasettings of opengl
   'colorbar'              - Add an colorbar to the image
 
  SURFACE STRUCTURE
   surface               A structured matrix containing the surface descriptor
       .pts              A 3xN matrix that describes all node positions
       .fac              A 3xM matrix that describes which nodes from one triangle
                         Each trianlge is represented by one column of this matrix
</pre><a name="ref11"></a><br><big><big>bemValidate</big></big><br><br><pre>  FUNCTION bemValidate
 
  DESCRIPTION
  This function generates some boundary element models (spherical) and computes
  both the boundary element method and the analytical solution in order to establish
  whether updates to the code still do their job
 
  INPUT -
 
  OUTPUT -
 
</pre><a name="ref12"></a><br><big><big>errMAG</big></big><br><br><pre>  FUNCTION mag = errMAG(Umeas,Upred)
 
  DESCRIPTION
  This fuunction computes the MAG error measurement bewteen two vectors
 
  INPUT
  Umeas    the measured vector
  Upred    the vector predicted by modelling
 
  OUTPUT
  mag      the mag number
 
  SEE ALSO errRMS errRDM errRDMS
</pre><a name="ref13"></a><br><big><big>errRDM</big></big><br><br><pre>  FUNCTION rdm = errRDM(Umeas,Upred)
 
  DESCRIPTION
  This fuunction computes thee RDM error measurement bewteen two vectors
 
  INPUT
  Umeas    the measured vector
  Upred    the vector predicted by modelling
 
  OUTPUT
  rdm      the rdm number
 
  SEE ALSO errRMS errRDMS errMAG
</pre><a name="ref14"></a><br><big><big>errRDMS</big></big><br><br><pre>  FUNCTION rdms = errRDMS(Umeas,Upred)
 
  DESCRIPTION
  This fuunction computes the RDM* error measurement bewteen two vectors
 
  INPUT
  Umeas    the measured vector
  Upred    the vector predicted by modelling
 
  OUTPUT
  rdm      the rdm number
 
  SEE ALSO errRMS errRDM errMAG
</pre><a name="ref15"></a><br><big><big>errRMS</big></big><br><br><pre>  FUNCTION rms = errRMS(Umeas,Upred)
 
  DESCRIPTION
  This fuunction computes the RMS error measurement bewteen two vectors
 
  INPUT
  Umeas    the measured vector
  Upred    the vector predicted by modelling
 
  OUTPUT
  rms      the rms number
 
  SEE ALSO errMAG errRDM errRDMS
</pre>