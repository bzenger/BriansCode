<big><big> Documentation for the SCRIPT directory </big></big><br>Contents: automaticly generated doucmentation <br>Filename: script.doc <br>Creation date: 04-Jun-2004 <br><br><br> <big><big> Contents </big></big> <br><a href="#ref1">General Description</a><br><a href="#ref2">DispSignal</a><br><a href="#ref3">FidsDisplay</a><br><a href="#ref4">ProcessingScript</a><br><a href="#ref5">SliceDisplay</a><br><a href="#ref6">scriptActivationMap</a><br><a href="#ref7">scriptCalcIntegrals</a><br><a href="#ref8">scriptInterp</a><br><a href="#ref9">scriptListScripts</a><br><a href="#ref10">subscriptRemapping</a><br><br><br><a name="ref1"></a><big><big>General Description</big></big><br><pre>README.txt / SCRIPT directory

SCRIPT-files
This directory contains scripts that ease the processing. Since the matlab environment is designed
as a library with a bunch of functions, it does not works like a program. In order to do processing
you can use the scripts defined in this directory. The script are the base for designing a signal-
processing routine, which will do the processing you like. As most jobs require processing a lot of
data sequentially, you should design your own script doing the processing you like. The scripts in 
this directory supply you a framework and show how to access the functionality of the matlab-environment.

New scripts for extending the data acquisition are always welcome. Please use a filename start with
'script' and supply a short description to be included in the automatic documentation on internet.
For the latter purpose you only need to supply a help in the first comment block, the rest will be 
generated automaticly.
 </pre><a name="ref2"></a><br><big><big>DispSignal</big></big><br><br><pre></pre><a name="ref3"></a><br><big><big>FidsDisplay</big></big><br><br><pre>  FUNCTION FidsDisplay()
 
  DESCRIPTION
  This is an internal function, that maintains the fiducial selection
  window. This function is called from ProcessingScript and should not be
  used without the GUI of the ProcessingScript.
 
  INPUT
  none - part of the GUI system
 
  OUTPUT
  none - part of the GUI system
 
  NOTE
  All communication in this unit works via the globals SCRIPT SCRIPTDATA
  FIDSDISPLAY. Do not alter any of these globals directly from the
  commandline
</pre><a name="ref4"></a><br><big><big>ProcessingScript</big></big><br><br><pre>  FUNCTION ProcessingScript
 
  DESCRIPTION
  This is the main entry point into the GUI processing software.
  This script will lead you through a couple of steps to do the
  basic signal processing, starting from ACQ files and ending up
  with tsdf files (timesseries, integration maps and, activation/recovery maps).
 
  INPUT
  none (everything is gui based)
 
  OUTPUT
  lots of files hopefully
 
  DATA FILES:
  processingscript.mat  - Last settings used to process some data.
  processingdata.mat    - A database with all the settings and selections the
 						user made, so reprocessing a file becomes easy!
 
</pre><a name="ref5"></a><br><big><big>SliceDisplay</big></big><br><br><pre>  FUNCTION SliceDisplay()
 
  DESCRIPTION
  This is an internal function, that maintains the slicing/averaging selection
  window. This function is called from ProcessingScript and should not be
  used without the GUI of the ProcessingScript.
 
  INPUT
  none - part of the GUI system
 
  OUTPUT
  none - part of the GUI system
 
  NOTE
  All communication in this unit works via the globals SCRIPT SCRIPTDATA
  SLICEDISPLAY. Do not alter any of these globals directly from the
  commandline
</pre><a name="ref6"></a><br><big><big>scriptActivationMap</big></big><br><br><pre>  FUNCTION scriptActivationMap(filenames,[options])
 
  DESCRIPTION
  This script helps in creating an activation map. The script will help you select the files which
  need to be converted into an activationmap. Subsequently it will extract the activation fiducials
  and store them in a new timeseries. In case you have a series of timeseries data that all are part
  of the same experiment you can add the activationmaps of each in one frame of the activationmap
  data. The activationmap uses the same structure as the timeseries, only now each frame as a time-
  series. The newly created map will be saved as a TSDF-file. You will be asked to supply a name for
  it. As input you need to specify a TSDFC-file and optional the TSDF-filenames which will be used as
  keys. Since the contents of the TSDF-files is ignored they do not necessarily have to be in the same
  directory.  
 
  INPUT
  filenames     a string with a filename, a cellarray with multiple filenames, or a .files file
                specifying the files you want to use. The filename list must include a tsdfc-file
                or a list of fids-files and of course the tsdf-files you want to process.    
  options       addional options for loading such as remapping the leads or frames. In case you want
                to specify options and no filenames, just put an empty array [] in filenames. This
                will ignore this argument
 
  OUTPUT	
   -
 
  OPTIONS
  Options can be defined as a structured array with fields specifying the options. Hence an option
  is a fieldname and its contents. Default options do not need to be specified (do not include the field)
  Here is a list of options you can use (will be extended in future)
 
  .framemap      specifies which frames you want to read e.g. [1:20] reads the first twenty
                 default is all.
  .leadmap       specifies which leads you want to read e.g [1 3 5 6 7] reads channels 1,3,5,6,7
                 default is all
 
  SEE ALSO -
</pre><a name="ref7"></a><br><big><big>scriptCalcIntegrals</big></big><br><br><pre>  FUNCTION scriptCalcIntegrals([filenames],[options])
 
  DESCRIPTION
  This script helps in creating integral maps. The script will help you select the files which
  need to be converted into integralmaps. You will be prompted to determine which integrals you
  want to compute. Subsequently the fiducials will be retrieved from the timeseries structure to
  determine the starting point and the ending point of the integration. Each integral will be 
  stored in a new timeseries data structure. If you supply more than one timeseries, the integrals
  will be computed for each timeseries you supply. The maps will be sorted by type and all maps of
  the same type (say QRST-map) will be put in one file. So when processing an experiment consisting 
  of multiple measurements in a row, the map will have all subsequent maps in one files.
  The script will ask you for filenames, please supply a TSDF-filename(s) and a TSDFC-filename.
  After computing the maps, you will be asked to supply a name for the integralmaps. An extension
  will be added to this name, determing the type of integral. You do not need to worry about this
  extension, it will be added automaticly. 
 
  INPUT
  filenames     a string with a filename, a cellarray with multiple filenames, or a .files file
                specifying the files you want to use. The filename list must include a tsdfc-file
                or a list of fids-files and of course the tsdf-files you want to process.    
  options       addional options for loading such as remapping the leads or frames. In case you want
                to specify options and no filenames, just put an empty array [] in filenames. This
                will ignore this argument
 
  OUTPUT	
   -
 
  OPTIONS
  Options can be defined as a structured array with fields specifying the options. Hence an option
  is a fieldname and its contents. Default options do not need to be specified (do not include the field)
  Here is a list of options you can use (will be extended in future)
 
  .framemap      specifies which frames you want to read e.g. [1:20] reads the first twenty
                 default is all.
  .leadmap       specifies which leads you want to read e.g [1 3 5 6 7] reads channels 1,3,5,6,7
                 default is all
 
  EXAMPLES
 
  >> scriptCalcIntegrals
  This will ask you for the filenames in the program and uses default options
 
  >> options.leadmap = [1:128]
  >> scriptCalcIntegrals(options)
  This will do the script only for the first 128 leads in the files, of course this option can be
  specified through the menu as well.
 
  test.files contains:
   tsdffile1.tsdf
   tsdffile2.tsdf
   tsdfcontainer.tsdfc
   tsdffile3.tsdf
 
  >> scriptCalcIntegrals('test.files')
  This will load the three tsdf-files and assumes tsdfcontainer to have the fiducials
 
  SEE ALSO -
</pre><a name="ref8"></a><br><big><big>scriptInterp</big></big><br><br><pre>  FUNCTION scriptInterp(tsdflabel,tsdfnumbers,.geomfile/.facfile/.channelsfile,badleads)
 
  DESCRIPTION
  This function does the laplacian interpolation scheme for a series of
  tsdf files.
 
  INPUT
  tsdflabel    The label of the tsdf files (label is filename without -number)
  tsdfnumbers  The numbers of the files you want to process
  .geomfiles   The .geom/.fac/.pts/.channels files that describe the
               geometry. This input cab be spread over multiple inputs
  badleads     The badlads you want to interpolate
 
  OUTPUT
               Tries to overwrite old files with the newly interpolate ones
 
  SEE ALSO
  -
</pre><a name="ref9"></a><br><big><big>scriptListScripts</big></big><br><br><pre>  FUNCTION scriptListScripts
 
  DESCRIPTION
  This function displays a list with all sccripts available.
 
  INPUT -
 
  OUTPUT -
 
  SEE ALSO -
</pre><a name="ref10"></a><br><big><big>subscriptRemapping</big></big><br><br><pre>  FUNCTION options = subscriptRemapping(options)
 
  DESCRIPTION
  This function is a piece of a complete script which helps you setup some 
  remapping parameters such as a leadmap or framemap. It also lets you load
  channels/mapping files to remap the channels for more convenient displaying
 
  INPUT
  options      The options array in which the remapping options have to be translated
 
  OUTPUT
  options      The same options array only now with a field leadmap or framemap
 
  NOTE
  You can put this subscript in your script if you want to allow remapping.
  You can supply the options array to ioReadTS, which will do the remapping for you
  upon loading the files. Or supply the options array to tsRemap, which will remap
  a set of timeseries in memory. Both functions accept the mapping options specified
  by this subscript.
  
  SEE ALSO - 
</pre>