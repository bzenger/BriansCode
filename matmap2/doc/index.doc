MATMAB/General documentation
contents: general notes on using the program
filename: DOCUMENTATION.txt
creation date: 19-Jun-2002
-------------------------------------------------------


CONTENTS

   General notes
   Running Matmap
   Program layout
   TS-structure


--------GENERAL NOTES----------

In order for the program to set-up its globals please use the 'matmap.m'
to start the program. This will add all paths to your environment, so you
can work with the program in any directory. You probably want to work from
the directory in which you stored the data, as no datapaths are included 
in the datafiles.


--------RUNNING MATMAP---------

Currently there are two directories that contain the program files:
  /mom/u/jeroen/matmap         - For general usage
  /mom/u/jeroen/matlab/matmap  - The developers directory

You should use the first version as it supposed to be the more stable one. 
The other directory version is just for testing and whenever a new general
stable version is available it is copied to the other directory for other
users to use. Since the program consists of so many different components it
is probably not bugfree and please report all bugs as most of them are probably
easy to repair.

In order to start the program use the 'matmap.m' script. This should do all
the paths for you and setup the global parameters. Until now that is the only
thing the startup script does. In the future the script may execute some 
other initialization scripts as well. Anyway it will be the only central startup
script in the program. It is written in such that it does not matter from which 
directory you start the script, as it traces back its own directory. Hence, you
should not relocate the script as it considers its own path as the main directory
for the matmap toolbox. 

Thence thee startup sequence is the following start matlab

> matlab

and then run the startup script

>> cd /mom/u/jeroen/matmap/
>> matmap

This should display you a welcome message and some recent notes on changes in the program
if any are present at least.
 
From this point you got two choices:

a) Using predefined scripts to do you signal processing. You should view these scripts
as little programs that guide you through the signal processing stage. Normally they
will guide you through the process of loading files, doing some processing and saving 
the files again with the processed data.

In order view which scripts are available use 'scriptListScripts'. It will give you an
overview of the scripts made so far. In order to further improve the matlab processing
new kinds of scripts may be required and any suggestions for new scripts are welcome.

Use help <scriptname> to retrieve the latest information on the script. By typing the 
name of the script in the commandline will start the script. Scripts are designed for 
sequentially processing many timeseries-datafiles. Normally the script explains its
purpose and lets you go through a variety of the input menus to specify your wishes and
then uses this input to process all the files you specified at once. 

b) Using the functions build in the toolbox. In this documentation you will find a complete
overview of the functions available. Suggestions for new functions are welcome as well.

Future work may include:
c) Using a GUI-interface to view data loaded and do the signal processing in a script like
way. This functionality still needs to be designed 
 
--------PROGRAM LAYOUT---------

PROGRAM SETUP
The matmap program is not a real program in a sense that you run it and requests information
and processes the files for you. To be more specific the program consists of a large number 
of small script files which will do a small amount of signal processing. The idea is to 
provide the user with a databank of functions that work closely together and can be
expanded upon individual wishes. On top of this databank of functions several general 
functions have been designed called 'scripts'. These scripts make use of the underlying
functions and guide you through specific signal-processing jobs. You could regard these
scripts as little programs that run within the environment. The aim of these scripts is
to make it easy to process a large amount of data in a similar manner. The function as
well as a template for programming more scripts of a similar nature.


FUNCTIONS
The program consists of a library of functions grouped into different classes. Each class
is given its own subdirectory in the matmap-directory. In order to locate functions within
the program tree the name of the function starts with this directory name. For instance the
activationmap script is called 'scriptActivationMap'. So you know this m-file resides in the
'script'-directory and that the function is intended as a script. It also helps you locate 
functions, for instance if you are looking for a certain io-function, you type io and press
<tab> matlab will show you all m-files in its search-path-directories which will start with
io.


GLOBALS
The program uses several globals to store the data. This reduces the amount of memory used
and allows you to use a kind of pointer to the data-structure. For instance, take the 
timeseries data, when it is loaded, the data is stored in one of the cells of the global TS.
Each of the cells of this global serve as a point in memory to store timeseries data. When 
loading for instance 'test.tsdf' the function will return the index of the cell where the 
timeseries was loaded, e.g.

>> index = ioReadTS('test.tsdf');
>> TS{index}  
>> TS{index}.numleads

This will load the data into the cell array called TS. Here index is the number of the cell
used to store the data in. The second command just displays the contents of the cell with
the number index. Hence in a sense index is a pointer to a position in the cell-array. The
third command will give you the number of leads of this particular timeseries.

All fields in these globals are structured arrays and can contain various fields all describing
one aspect of the timeseries. Note that not every cell needs to contain the same amount of
information. For instance when no fiducials are associated with the timeseries the field
'fids' which describes the fiducials is not present. 

A similar global exists for storing geometry called GEOM.  

--------TS-structure-----------

The central structure in the program is called TS and stands for timeseries.
This structured cellarray is a global and contains the timeseries data.
Each cell in this global represents one timeseries. Hence, the program can 
deal with multiple timeseries by storing them in different cells. The structure
was chosen in order to reduce the amount of memory used. In this case each
timeseries is only stored once in memory. Hence to work with the globals and
inspect its contents, mark TS as global using the global function of matlab:

global TS;

This would do the trick. Upon loading data with ioReadTS, you will receive
indices into this TS structure. Normally the first empty cells found will be
used to store the data. You can check this out by entering

index = ioReadTS('test.tsdf');
TS{index}

The latter will list you what kind of elements are stored in the timeseries
data. Beware that not all fields need to be present. For instance if no
fiducials are found the .fids and .fidset fields will not exist. Hence for a
secure use of the structure check first whether a field exists using 
'isfield'.

The fields in the TS-structure are:
 .filename          The filename of the TSDF-file
 .label             The label of the timeseries, as mentioned in the TSDF-file
 .potvals           A matrix contain the potential values, the matrix has the dimensions of the
                    number of leads by the number of frames. Throughout the program the convertion
                    of numbers of rows is number of leads and the number of columns is the number
                    of frames is followed.
 .numleads          Number of leads, which should be equal to the number of rows in the potvals 
                    matrix. When writing files this values is computed again from the potvals array.
                    In a sense it is redundant, but it is kept as an easy way to get the dimensions of
                    the data.
 .numframes         Number of frames, which should be equal to the number of columns in the potvals
                    matrix. This one is redundant as well and is computed again upon writing a TSDF-
                    file
 .leadinfo          Information on the quality of each lead. The bits in this array describe the following
			bit 0 = BAD, bit 1 = BLANK, bit 2 = INTERP
                    Each lead is represented in this array. Use the tsIsBad, tsIsBlank and tsIsInterp to
                    access these fields.
 .unit              Unit information on the potvals matrix.
 .geom              Pointer into the GEOM cell-array for connecting it to the geometry information.
                    This field can contain multiple indices indicating more than one surface.
 .geomfile          Filename of the geometry (not loaded automaticly)
 .expid             The experiment ID, this field is directly taken from TSDF-file. 
 .text              A text field for comments, taken as well from the TSDF-file.
 .audit             The audit string of the timeseries.
 .samplefrequency   Unless specified otherwise a frequenccy of 1000Hz is assumed.
 .newfileext        Stating the new extention for saving the file, this extension is added to
                    the end of the name just before the .tsdf fileextension. For instance this
                    field is used to tell the program that the timeseries have been converted 
                    to integralmaps by setting this field to '_itg'.   
 .fids              Structure describing the fiducials it contains the following fields:
                    .value        Value of fiducial. Its dimension is one for a global fiducial and the 
                                  number of leads for a local one.
                    .type         Type of the fiducial (number) see fidsType to get the number
                    .fidset       Pointer to the fidset array, which contains additional information
 .fidset            Each fiducial is coupled to a fidset, this cellarray contains the fidset information.
                    It contains TSDFC-filenames, fidset numbers and labels and audit strings.


--------------------------------
