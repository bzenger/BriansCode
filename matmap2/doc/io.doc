<big><big> Documentation for the IO directory </big></big><br>Contents: automaticly generated doucmentation <br>Filename: io.doc <br>Creation date: 04-Jun-2004 <br><br><br> <big><big> Contents </big></big> <br><a href="#ref1">ioACQFilename</a><br><a href="#ref2">ioAddFilePath</a><br><a href="#ref3">ioFilename</a><br><a href="#ref4">ioMATFilename</a><br><a href="#ref5">ioReadCal</a><br><a href="#ref6">ioReadCal8</a><br><a href="#ref7">ioReadChannels</a><br><a href="#ref8">ioReadDFCFiles</a><br><a href="#ref9">ioReadFac</a><br><a href="#ref10">ioReadFids</a><br><a href="#ref11">ioReadFidsFile</a><br><a href="#ref12">ioReadFiles</a><br><a href="#ref13">ioReadGEOM</a><br><a href="#ref14">ioReadGEOMdata</a><br><a href="#ref15">ioReadGeomFacPts</a><br><a href="#ref16">ioReadMap</a><br><a href="#ref17">ioReadMapping</a><br><a href="#ref18">ioReadMs</a><br><a href="#ref19">ioReadPts</a><br><a href="#ref20">ioReadTS</a><br><a href="#ref21">ioReadTSDFCFiles</a><br><a href="#ref22">ioReadTSdata</a><br><a href="#ref23">ioTSDFFilename</a><br><a href="#ref24">ioTSDFFilename2</a><br><a href="#ref25">ioUpdateFilename</a><br><a href="#ref26">ioWriteCal</a><br><a href="#ref27">ioWriteCal8</a><br><a href="#ref28">ioWriteChannels</a><br><a href="#ref29">ioWriteFac</a><br><a href="#ref30">ioWriteGEOM</a><br><a href="#ref31">ioWriteGEOMdata</a><br><a href="#ref32">ioWriteGEOMfac</a><br><a href="#ref33">ioWritePts</a><br><a href="#ref34">ioWriteTS</a><br><a href="#ref35">ioWriteTSDFC</a><br><a href="#ref36">ioWriteTSdata</a><br><a href="#ref37">ioiInputParameters</a><br><a href="#ref38">ioiReadACQ</a><br><a href="#ref39">ioiReadACQdata</a><br><a href="#ref40">ioiReadFids</a><br><a href="#ref41">ioiReadFidsdata</a><br><a href="#ref42">ioiReadTSDF</a><br><a href="#ref43">ioiReadTSDFCFiles</a><br><a href="#ref44">ioiReadTSDFdata</a><br><a href="#ref45">ioiUpdateFids</a><br><br><br><a name="ref1"></a><br><big><big>ioACQFilename</big></big><br><br><pre>  FUNCTION filename = ioACQFilename(label,filenumber,[filenameaddons,...])
 
  DESCRIPTION
  This function generates the ACQ filenames from the different pieces
 
  INPUT
  label           the label of the series
  filenumber      the number of the file or files (in case of more numbers it 
                  creates a cell array of filenames)
  filenamesaddons addons like '_itg' or '_epi' etc.
 
  OUTPUT
  filename        the filename or a list of filenames (cellarray)
 
  SEE ALSO ioTSDFFilename
</pre><a name="ref2"></a><br><big><big>ioAddFilePath</big></big><br><br><pre></pre><a name="ref3"></a><br><big><big>ioFilename</big></big><br><br><pre>  FUNCTION filename = ioFilename(fileext,label,filenumber,[filenameaddons,...])
 
  DESCRIPTION
  This function generates the CVRTI formatted filename from the different pieces
 
  INPUT
  fileext         the filename extension
  label           the label of the series
  filenumber      the number of the file or files (in case of more numbers it 
                  creates a cell array of filenames)
  filenamesaddons addons like '_itg' or '_epi' etc.
 
  OUTPUT
  filename        the filename or a list of filenames (cellarray)
 
  SEE ALSO ioTSDFFilename
</pre><a name="ref4"></a><br><big><big>ioMATFilename</big></big><br><br><pre>  FUNCTION filename = ioMATFilename(label,filenumber,[filenameaddons,...])
 
  DESCRIPTION
  This function generates the MAT filenames from the different pieces
 
  INPUT
  label           the label of the series
  filenumber      the number of the file or files (in case of more numbers it 
                  creates a cell array of filenames)
  filenamesaddons addons like '_itg' or '_epi' etc.
 
  OUTPUT
  filename        the filename or a list of filenames (cellarray)
 
  SEE ALSO ioTSDFFilename
</pre><a name="ref5"></a><br><big><big>ioReadCal</big></big><br><br><pre>  FUNCTION cal = ioReadCal(filename)
 
  DESCRIPTION
  This function reads a .cal file into a matrix.
 
  INPUT
  filename     name of the file (with or without extension)
 
  OUTPUT
  cal          vector with the calibration information
 
  SEE ALSO ioReadMaping
</pre><a name="ref6"></a><br><big><big>ioReadCal8</big></big><br><br><pre>  FUNCTION cal = ioReadCal8(filename)
 
  DESCRIPTION
  This function reads a .cal8 file into a matrix.
  A .cal8 file contains the calibration for multiple gain settings
 
  INPUT
  filename     name of the file (with or without extension)
 
  OUTPUT
  cal          vector with the calibration information
 
  SEE ALSO ioReadMaping
</pre><a name="ref7"></a><br><big><big>ioReadChannels</big></big><br><br><pre>  FUNCTION channels  = ioReadChannels(filename)
 
  DESCRIPTION
  This function reads a channels file into a matrix.
 
  INPUT
  filename     name of the file (with or without extension)
 
  OUTPUT
  channels     Matrix containing the translation matrix for channel numbers and geometry
               The first column matches the geometry node number and the second the 
               the leadnumber in the tsdf data file.
               Hence every row in the matrix marks a link between a geometry node and a 
               measurement channel 
 
  SEE ALSO ioWriteChannels
</pre><a name="ref8"></a><br><big><big>ioReadDFCFiles</big></big><br><br><pre>  FUNCTION TSDFCarray = ioReadDFCFiles(filenames)
 
  DESCRIPTION
  This function reads the pointers to the TSDFC-files which are stored in the DFC-files. If DFC files are nested multiple
  files are read until the level where everything is a TSDFC-file. This function will return the TSDFC entries found in 
  a DFC-file. The function differs from ioReadTSDFCFiles in that respect that it returns TSDFC-files and NOT TSDF-files. 
  This function was designed to support the reading of DFC-files as if they are arrays of TSDFC-files. Hence it is used 
  in preparsing the TSDFC/DFC-file arrays to consist only of TSDFC-files. In the reading process DFC-files are interpreted
  as being an array of TSDFC-files.
 
  INPUT
  filenames     The DFC-file names. This can be a string or string array.
 
  OUTPUT
  tdsfcarray    The TDSFC-files contained in the DFC-file(s).
 
  SEE ALSO ioReadTSDFCFiles
</pre><a name="ref9"></a><br><big><big>ioReadFac</big></big><br><br><pre>  FUNCTION fac  = ioReadFac(filename)
 
  DESCRIPTION
  This function reads a fac-geometry file into a matrix
 
  INPUT
  filename      name of the FAC-file
 
  OUTPUT
  fac           matrix containing the triangulation information
 
  SEE ALSO ioWriteFac
</pre><a name="ref10"></a><br><big><big>ioReadFids</big></big><br><br><pre>  FUNCTION ioReadFids([TSindex],filenames,options)
 
  DESCRIPTION
  This function reads the fiducials from a TSDFC-file and
  from FIDS-files. Even fiducials stored within a TSDF-file are
  processed. The fiducials from external files are read and stored
  in the fids/fidset fields. All the fields will be renumber properly.
 
 
  INPUT
  TSindex        Which timeseries need to be processed
  filenames      What is the filename array (cellarray)
  options        WHich options are specified
 
  OUTPUT -
 
  SEE ALSO ioReadTS
</pre><a name="ref11"></a><br><big><big>ioReadFidsFile</big></big><br><br><pre>  FUNCTION [fids,fidset] = ioReadFidsFile(filename)
 
  DESCRIPTION
  function for reading '.fids' files
  the function returns the fids and fidset structures which
  correspond to the fids file
 
  INPUT
  filename     the filename of the fids-file (no checking on extension)
 
  OUTPUT
  fids         fidset broken down in pieces
  fidset       array stating where the fidset came from
 
  SEE ALSO ioReadFids
</pre><a name="ref12"></a><br><big><big>ioReadFiles</big></big><br><br><pre>  FUNCTION filelist = ioReadFiles(filename)
 
  DESCRIPTION
  This function reads a filelist from a .files or .filelist file.
  Both files are ascii lists with one filename at each line.
  .files/.filelist files are used to ease the input of filenames
  In the reading process the files contained by the list are read
  The ioReadTS function allows for specifying the input files through
  a .files/.filelist file. 
 
  INPUT
  filename            the filename (no checking of extension)
 
  OUTPUT
  filelist            cellarray with filenames
 
  SEE ALSO ioReadTS
</pre><a name="ref13"></a><br><big><big>ioReadGEOM</big></big><br><br><pre>  FUNCTION geomindices = ioReadGEOM(filenames)
 
  DESCRIPTION
  This function will add a set of geometry (.fac/.pts/.channels) to the GEOM-structure
 
  INPUT
  filenames      The filenames of the geometry files that you want to load. In case multiple
                 datasets are specified first specify the .geom or .fac file then the .pts 
                 and .channels files. To specify a certain surface in a geom file use the
                 file.geom@<number> notation to only retrieve that surface.
 
  OUTPUT
  geomindices    Indices in the GEOM structure specifying where the data is stored
 
  SEE ALSO
  ioWriteGEOM
</pre><a name="ref14"></a><br><big><big>ioReadGEOMdata</big></big><br><br><pre>  FUNCTION geomdata = ioReadGEOMdata(filenames)
 
  DESCRIPTION
  This function will add a set of geometry (.fac/.pts/.channels) to a variable
 
  INPUT
  filenames      The filenames of the geometry files that you want to load. In case multiple
                 datasets are specified first specify the .geom or .fac file then the .pts 
                 and .channels files. To specify a certain surface in a geom file use the
                 file.geom@<number> notation to only retrieve that surface.
 
  OUTPUT
  geomdata       Cell array with one surface per cell
 
  SEE ALSO
  ioWriteGEOMdata
</pre><a name="ref15"></a><br><big><big>ioReadGeomFacPts</big></big><br><br><pre>  FUNCTION geomindices = ioReadGEOM(filenames)
 
  DESCRIPTION
  This function will add a set of geometry (fac/pts/channels) to the GEOM-structure
 
  INPUT
 
  OUTPUT
 
  SEE ALSO
</pre><a name="ref16"></a><br><big><big>ioReadMap</big></big><br><br><pre>  FUNCTION map = ioReadmap(filename)
 
  DESCRIPTION
  This function loads a mapping/channels file. A mapping file is directly loaded
  into memory as it specifies where each channel should be located. A channels file
  is translated to be in the same format of the mapping file if possible. The
  structure of the latter file is different and thence needs a small conversion to
  act as a remapping file. In a mapping file each subsequent lead in the resulting 
  data matrix is assigned a new set of data whereas for a channels file this is not
  necessarily true. Hence in the latter case zeros are put in between.
  
  INPUT
  filename		name of the file (wildcards allowed)
 
  OUTPUT
  map			a vector specifying which channels should be mapped to position one,two
                        etc. map(1) is the new lead/frame at position one, map(2) for position two
                        and so on.
 
  SEE ALSO ioReadChannels, ioReadMapping
</pre><a name="ref17"></a><br><big><big>ioReadMapping</big></big><br><br><pre>  FUNCTION mapping  = ioReadMapping(filename)
 
  DESCRIPTION
  This function reads a .mapping file into a matrix.
 
  INPUT
  filename     name of the file (with or without extension)
 
  OUTPUT
  mapping      vector with the mapping information
 
  SEE ALSO ioReadChannels
</pre><a name="ref18"></a><br><big><big>ioReadMs</big></big><br><br><pre>  FUNCTION [label,pts] = ioReadMs(filename)
 
  DESCRIPTION
  This function disassembles a .ms file from the microscribe digitiser.
  It splits the label and the digitised positions into two arrays.
 
  INPUT
  filename    the name of the .ms file
 
  OUTPUT
  label       a cell array with all the labels recorded in the file
  pts         all the pts recorded in the file.
 
  SEE ALSO -
</pre><a name="ref19"></a><br><big><big>ioReadPts</big></big><br><br><pre>  FUNCTION pts  = ioReadPts(filename)
 
  DESCRIPTION
  This function reads a pts-geometry file into a matrix
 
  INPUT
  filename      name of the pts-file
 
  OUTPUT
  pts           matrix containing the positions of nodes
 
  SEE ALSO ioWritePts, ioReadFac
</pre><a name="ref20"></a><br><big><big>ioReadTS</big></big><br><br><pre>  FUNCTION TSindices = ioReadTS(filenames,[indexvector],[options])
 
  INPUT
  filenames      An cellarray of strings or a string specifying the files to be loaded. The function requires
                 that you specify the filename complete with extension. The use of wildcards in the filenames
                 is allowed. The filenames can be contained in one or more input arguments. The order of the
                 filenames determines the order in which they are read.
                 Files loaded include .tsdf/.data/.acq/.tsdfc./dfc./.fids/.mapping/.cal/.cal8
                 Warning do not mix .acq and .tsdf it may lead to some unpredicted effects
                 Specifying a TSDFC-file without any TSDF-files will load the complete list contained in the
                 TSDFC-file.
                 Specifying a TSDF-file in combination with a TSDFC-file, will use the TSDFC-files to lookup
                 the data specified for the timeseries in the TSDF-files. Instead of a TSDFC-file a DFC file
                 can be specified as well. The latter is considered to be an array TSDFC-files. If multiple
                 entries are found in the collection of TSDFC-files multiple versions of the TSDF-file are 
                 loaded. 
                 Specifying a GEOM-file or a combination of FAC/PTS/CHANNELS-files will add the geometry to the
                 loaded data. The geometry will be linked to the TS-data in the geom field which has a pointer
                 to geometries specified in GEOM. In order to specify geometries keep up with the following rules
                 specify the geometry files in the following order channels-file followed by a geom or fac file.
                 The latter may be accompanied by pts file as well. The program will keep this search order and
                 groups the geometry files in that order.
 
  indexvector    Specifies which and in which order the timeseries have to be loaded. Assuming the input file
                 series to be number 1 to n. The indexvector tells the function which of those to actually load.
                 Use this function to specify the timeseries in a TSDFC-file or for a TSDF-file with multiple
                 entries. The timeseries are read first scanning the first string array or string then passing to
                 the next argument and scanning through them etc. Use ioScanTS to get an overview of the timeseries
                 specified.
  options        See options section
 
  OUTPUT
  TSindices      The indices to the TS-cell array where the files have been loaded.
 
  NOTE FOR ACQ FILES
                 Calibration and mapping is done while loading of the acq-data. Specify a .mapping and a .cal/.cal8
                 file as input parameters for calibration and mapping of the data. Use sigCalibrate8 to create a
                 calibration file.    
 
  OPTIONS
  Options can be defined as a structured array with fields specifying the options. Hence an option
  is a fieldname and its contents. Default options do not need to be specified (do not include the field)
  Here is a list of options you can use (will be extended in future)
 
  .framemap      Specifies which frames you want to read e.g. [1:20] reads the first twenty
                 The default setting is all frames.
  .leadmap       Specifies which leads you want to read e.g [1 3 5 6 7] reads channels 1,3,5,6,7
                 the default setting is all leads.
  .skiptsdffile  Specifies that you do not want to load the TSDF-files and it will only load the data from
                 the TSDFC-files. This function is turned off default. Just assign it to be one to turn it on.
  .scantsdffile  Specifies that you only want to scan the TSDF-files. This will load details like the label and
                 auditstrings, number of channels and number of leads but not the data itself.
                 This function is turned off default. Just assign it to be one to turn it on.
  .readtsdffids  Read the global fiducials stored in the TSDF-files as well. If this options is turned on, you 
                 cannot skip reading a TSDF-file. Turn this one by setting it to one.
  .timeseries    Another way of specifying which timeseries to load from a TSDF-file. This will apply to all the
                 files you supply. This array contains the number of timeseries you want to load.
  .scalemap      For ACQ files only. This options specifies the scaling of each map. Basicly each channel is multiplied
                 by this value. The scalemap has to be the same size as the number of channels or th e leadmap
                 In case of a leadmap specify the scalemap values in the same order as the leadmap (the way it is done
                 in a .cals file)
  SEE ALSO ioWriteTS
</pre><a name="ref21"></a><br><big><big>ioReadTSDFCFiles</big></big><br><br><pre>  FUNCTION TSDFarray = ioReadTSDFCFiles(filenames,options)
 
  DESCRIPTION
  This function reads the file-pointers contained in a TSDFC-file or a DFC-file. The function
  returns the filenames in the order of the TSDFC-files. Within a TSDFC-file the keys are
  alphabetically sorted by the function. If a DFC-file is supplied this file will be translated into 
  TSDFC-filenames first and subsequently they will be processed as an array of TSDFC-files.
  The function is intented to get all the TSDF-filenames to be loaded. Since the default option
  of ioReadTS in case no TSDF-filename is supplied is to read them all, this function is called
  establish what is all.
 
  INPUT
  filenames      A string or cell-array with strings specifying the TSDFC/DFC-files to be processed
 
  OUTPUT
  TSDFarray      The TDSF-files contained in the DFC/TSDFC-files.
 
  SEE ALSO ioReadDFCFiles
</pre><a name="ref22"></a><br><big><big>ioReadTSdata</big></big><br><br><pre>  FUNCTION data = ioReadTSdata(filenames,[indexvector],[options])
 
  REMARK
  This function is a copy of ioReadTS but does not load the data in the TS structure but returns a cell array
  directly.
 
  INPUT
  filenames      An cellarray of strings or a string specifying the files to be loaded. The function requires
                 that you specify the filename complete with extension. The use of wildcards in the filenames
                 is allowed. The filenames can be contained in one or more input arguments. The order of the
                 filenames determines the order in which they are read.
                 Files loaded include .tsdf/.tsdfc./dfc/.fids/.acq/.mapping/.cal/.cal8 
                 Specifying a TSDFC-file without any TSDF-files will load the complete list contained in the
                 TSDFC-file.
                 Specifying a TSDF-file in combination with a TSDFC-file, will use the TSDFC-files to lookup
                 the data specified for the timeseries in the TSDF-files. Instead of a TSDFC-file a DFC file
                 can be specified as well. The latter is considered to be an array TSDFC-files. If multiple
                 entries are found in the collection of TSDFC-files multiple versions of the TSDF-file are 
                 loaded. 
 
  indexvector    Specifies which and in which order the timeseries have to be loaded. Assuming the input file
                 series to be number 1 to n. The indexvector tells the function which of those to actually load.
                 Use this function to specify the timeseries in a TSDFC-file or for a TSDF-file with multiple
                 entries. The timeseries are read first scanning the first string array or string then passing to
                 the next argument and scanning through them etc. Use ioScanTS to get an overview of the timeseries
                 specified.
  options        See options section
 
  OUTPUT
  data           A cell array with the data contained in the files.
 
  OPTIONS
  Options can be defined as a structured array with fields specifying the options. Hence an option
  is a fieldname and its contents. Default options do not need to be specified (do not include the field)
  Here is a list of options you can use (will be extended in future)
 
  .framemap      Specifies which frames you want to read e.g. [1:20] reads the first twenty
                 The default setting is all frames.
  .leadmap       Specifies which leads you want to read e.g [1 3 5 6 7] reads channels 1,3,5,6,7
                 the default setting is all leads.
  .skiptsdffile  Specifies that you do not want to load the TSDF-files and it will only load the data from
                 the TSDFC-files. This function is turned off default. Just assign it to be one to turn it on.
  .scantsdffile  Specifies that you only want to scan the TSDF-files. This will load details like the label and
                 auditstrings, number of channels and number of leads but not the data itself.
                 This function is turned off default. Just assign it to be one to turn it on.
  .readtsdffids  Read the global fiducials stored in the TSDF-files as well. If this options is turned on, you 
                 cannot skip reading a TSDF-file. Turn this one by setting it to one.
  .timeseries    Another way of specifying which timeseries to load from a TSDF-file. This will apply to all the
                 files you supply. This array contains the number of timeseries you want to load.
  .scalemap      Adds a scalingmap for a ACQ file. A values are multiplied my the data in this vector
                 The vector should have the same size as the number of leads. 
 
  SEE ALSO ioWriteTS ioWriteTSdata ioReadTS sigCalibrate8
</pre><a name="ref23"></a><br><big><big>ioTSDFFilename</big></big><br><br><pre>  FUNCTION filename = ioTSDFFilename(label,filenumber,[filenameaddons,...])
 
  DESCRIPTION
  This function generates the TSDF filenames from the different pieces
 
  INPUT
  label           the label of the series
  filenumber      the number of the file or files (in case of more numbers it 
                  creates a cell array of filenames)
  filenamesaddons addons like '_itg' or '_epi' etc.
 
  OUTPUT
  filename        the filename or a list of filenames (cellarray)
 
  SEE ALSO ioTSDFFilename
</pre><a name="ref24"></a><br><big><big>ioTSDFFilename2</big></big><br><br><pre>  FUNCTION filename = ioTSDFFilename(label,filenumber,[filenameaddons,...])
 
  DESCRIPTION
  This function generates the TSDF filenames from the different pieces
 
  INPUT
  label           the label of the series
  filenumber      the number of the file or files (in case of more numbers it 
                  creates a cell array of filenames)
  filenamesaddons addons like '_itg' or '_epi' etc.
 
  OUTPUT
  filename        the filename or a list of filenames (cellarray)
 
  SEE ALSO ioTSDFFilename
</pre><a name="ref25"></a><br><big><big>ioUpdateFilename</big></big><br><br><pre>  FUNCTION filename = ioUpdateFilename(fileext,oldfilename,[filenameaddon])
 
  DESCRIPTION
  This function generates the CVRTI formatted filename from the different pieces
 
  INPUT
  fileext             the filename extension
  oldfilename         the old filename
  filenamesaddon      an addon like '-itg' or '-ari' etc.
 
  OUTPUT
  filename        the filename or a list of filenames (cellarray)
 
  SEE ALSO ioTSDFFilename
</pre><a name="ref26"></a><br><big><big>ioWriteCal</big></big><br><br><pre>  FUNCTION ioWriteCal(filename,cal)
 
  DESCRIPTION
  This function writes a .cal file.
 
  INPUT
  filename   The filename to be used for the .cal file
             The extension .cal is automatically added
  cal        The vector containing the calibrations
 
  OUTPUT
  -
 
  SEE ALSO ioReadCal
</pre><a name="ref27"></a><br><big><big>ioWriteCal8</big></big><br><br><pre>  FUNCTION ioWriteCal(filename,cal)
 
  DESCRIPTION
  This function writes a .cal8 file.
  A cal8 file has 8 calibration values per channels (one for each gain setting)
 
  INPUT
  filename   The filename to be used for the .cal file
             The extension .cal is automatically added
  cal        The vector containing the calibrations
 
  OUTPUT
  -
 
  SEE ALSO ioReadCal8
</pre><a name="ref28"></a><br><big><big>ioWriteChannels</big></big><br><br><pre>  function result = ioWriteChannels(filename,Channels)
 
  this function writes a fac-geometry file to file
 
  INPUT
   filename - name of the output file
   Channels - matrix containing the translation matrix for channel numbers and geometry
      The first column matches the geometry node number and the second the 
      the leadnumber in the tsdf data file.
      Hence every row in the matrix marks a link between a geometry node and a 
      measurement channel 
 
  OUTPUT
   result   - is one in case of success or zero in case of failure
 
  SEE ioReadChannels
</pre><a name="ref29"></a><br><big><big>ioWriteFac</big></big><br><br><pre>  function result = ioWriteFac(filename,Fac)
 
  this function writes a fac-geometry file to file
 
  INPUT
   filename - name of the output file
   Fac      - matrix containing the triangulation data
 
  OUTPUT
   result   - is one in case of success or zero in case of failure
</pre><a name="ref30"></a><br><big><big>ioWriteGEOM</big></big><br><br><pre>  FUNCTION ioWriteGEOM(filename,geomdata,['noprompt'])
 
  DESCRIPTION
  This function writes a .geom file
 
  INPUT
   filename       the filename(s) for saving the data (append extension .geom)
   geomdata       indices to the GEOM structure or direct structured data
  
  OPTIONS
   noprompt       do not prompt before overwriting a file
 
  OUTPUT
   -
 
  GEOM STRUCTURE
   .filename      - filename
   .name          - the name of the data (where it came from)
   .pts           - pts file
   .cpts          - the conductivity tensors per point
   .fac           - fac file
   .cfac          - the conductivity tensors per element
   .channels      - the channels file
 
  SEE ALSO ioReadGEOM, ioReadGEOMdata
</pre><a name="ref31"></a><br><big><big>ioWriteGEOMdata</big></big><br><br><pre>  FUNCTION ioWriteGEOMdata(filename,geomdata,['noprompt'])
 
  DESCRIPTION
  This function writes a .geom file
 
  INPUT
  filename       the filename(s) for saving the data (append extension .geom)
  geomdata       indices to the GEOM structure or direct structured data
  
  OPTIONS
  noprompt       do not prompt before overwriting a file
 
  OUTPUT
  -
 
  NOTE
  Unlike ioWriteTS/ioWriteTSdata this function does not generate filenames
  automatically, hence you need to supply a filename. The function does not 
  have a overwrite protection neither, except that it prompts for permission 
  whenever overwriting an old geom file.
 
  GEOM STRUCTURE
   .filename      - filename
   .name          - the name of the data (where it came from)
   .pts           - pts file
   .cpts          - the conductivity tensors per point
   .fac           - fac file
   .cfac          - the conductivity tensors per element
   .channels      - the channels file
 
  SEE ALSO ioReadGEOM, ioReadGEOMdata
</pre><a name="ref32"></a><br><big><big>ioWriteGEOMfac</big></big><br><br><pre>  FUNCTION ioWriteGEOMfac(filename,geomdata,['noprompt'])
 
  DESCRIPTION
  This function writes a .geom file
 
  INPUT
   filename       the filename for saving the data (append extension .geom)
   geomdata       indices to the GEOM structure or direct structured data
  
  OPTIONS
   noprompt       do not prompt before overwriting a file
 
  OUTPUT
   -
 
  GEOM STRUCTURE
   .filename      - filename
   .name          - the name of the data (where it came from)
   .pts           - pts file
   .cpts          - the conductivity tensors per point
   .fac           - fac file
   .cfac          - the conductivity tensors per element
   .channels      - the channels file
 
  SEE ALSO ioReadGEOM, ioReadGEOMdata, ioWriteGEOM, ioWriteGEOMdata
</pre><a name="ref33"></a><br><big><big>ioWritePts</big></big><br><br><pre>  function result = ioWriteFac(filename,Pts)
 
  this function writes a fac-geometry file to file
 
  INPUT
   filename - name of the output file
   Pts      - matrix containing the node position data
 
  OUTPUT
   result   - is one in case of success or zero in case of failure
</pre><a name="ref34"></a><br><big><big>ioWriteTS</big></big><br><br><pre>  function newfilenames = ioWriteTS(filenames,TSindices,[options],[overwrite],[noprompt],[oworiginal])
 
  DESCRIPTION
   This function writes TSDF and TSDFC-files 
 
  INPUT
  filenames      An cellarray of strings or a string specifying the files to be loaded. The function requires
                 that you specify the filename complete with extension. The use of wildcards in the filenames
                 is allowed. The filenames can be contained in one or more input arguments. The order of the
                 filenames determines the order in which they are written.
                 Files that can be written are .tsdfc and .tsdf.
                 If you want to write the geometry files (.geom/.fac/.pts/.channels) use ioWriteGeom. 
                 1) Specifying a TSDFC-file without any TSDF-files will try to store each timeseries in a new file.
                 The newfile name will be the filename with the newfileext attached to it.
               	 If the field newfileext is empty  a statement '_copy' will be added. In this way no source tsdf
                 file will be overwriten. If you want to determine the filename completely, delete the field
                 filename and put the new filename in newfileext. This way you control the filenames.
                 However if the new file already exists the function will not allow you to overwrite any tsdf
                 file. In order to unlock this savety feature, state 'overwrite' at the end of the statement.
                 This will cause the function to prompt for each file you are about to overwrite  
                 2) Specifying a series of TSDF-filenames will overrule the standard generated names and saves
                 your files with these names. Be sure to put 'overwrite' if you want to be able to overwrite 
                 existing files and take care that the list of tsdf filenames equals the dimension of TSindices.	
                 3) if you want multiple timeseries in one file, use ioWriteTSDF instead. This function will not
                 allow more than one timeseries per file. 		 
              	 Note if you want to write fiducials you have to supply a tsdfcfilename. Ohterwise no fiducials will
                 be saved.
 			
 
  TSindices      Specify which timeseries need to be saved
 
  OPTIONS        
  .tsdfconly     Only write the fiducials to an existing or a new tsdfc-file
 
  OPTIONS TO BE SPECIFIED AS EXTRA ARGUMENTS (SO NO MISTAKES ARE MADE AND NO HIDDEN OPTIONS ARE LOCATED IN THE OPTIONS ARGUMENT) 
  'overwrite'    Unlock overwriting of tsdf-files (originals: the filename in the field filename is not overwritten)
  'oworiginal'   Unlock overwriting of the original files. If no newfileext is specified the old file will be overwritten
                 With noprompt off a confirmation will be required before replacing the original file.
  'noprompt'	 Disable prompting a savety check before saving the file (In case a file is overwritten)
 
 
  SEE ALSO ioReadTS ioWriteTSdata ioReadTSdata
</pre><a name="ref35"></a><br><big><big>ioWriteTSDFC</big></big><br><br><pre>  FUNCTION ioWriteTSDFC(tsdfcfile,key,TSindex)
 
  INTERNAL FUNCTION
  Try to avoid direct usage of this function. Use ioWriteTS instead
 
  DESCRIPTION
  This function writes an entry in the TSDFC-file. At the moment the function only
  supports fiducials, but in the future it should be able to do a rewrite. This still
  requires some programming.
 
  INPUT
  tsdfcfile                the tsdfc file to store the data in
  key                      the name of the tsdf file.
  TSindex                  the index from where to get the fiducials
 
  OUTPUT -
 
  SEE ALSO -
</pre><a name="ref36"></a><br><big><big>ioWriteTSdata</big></big><br><br><pre>  function newfilenames = ioWriteTS(filenames,TSindices,[options],[overwrite],[noprompt],[oworiginal])
 
  DESCRIPTION
   This function writes TSDF and TSDFC-files. It is a copy ioWriteTS (both do the same thing) 
 
  INPUT
  filenames      An cellarray of strings or a string specifying the files to be loaded. The function requires
                 that you specify the filename complete with extension. The use of wildcards in the filenames
                 is allowed. The filenames can be contained in one or more input arguments. The order of the
                 filenames determines the order in which they are written.
                 Files that can be written are .tsdfc and .tsdf.
 		 If you want to write the geometry files (.geom/.fac/.pts/.channels) use ioWriteGeom. 
                 1) Specifying a TSDFC-file without any TSDF-files will try to store each timeseries in a new file.
 		 The newfile name will be the filename with the newfileext attached to it.
 		 If the field newfileext is empty  a statement '_copy' will be added. In this way no source tsdf
 		 file will be overwriten. If you want to determine the filename completely, delete the field
                 filename and put the new filename in newfileext. This way you control the filenames.
 		 However if the new file already exists the function will not allow you to overwrite any tsdf
                 file. In order to unlock this savety feature, state 'overwrite' at the end of the statement.
 		 This will cause the function to prompt for each file you are about to overwrite  
 		 2) Specifying a series of TSDF-filenames will overrule the standard generated names and saves
 		 your files with these names. Be sure to put 'overwrite' if you want to be able to overwrite 
                 existing files and take care that the list of tsdf filenames equals the dimension of TSindices.	
 		 3) if you want multiple timeseries in one file, use ioWriteTSDF instead. This function will not
                 allow more than one timeseries per file. 		 
 		 Note if you want to write fiducials you have to supply a tsdfcfilename. Ohterwise no fiducials will
                 be saved.
 			
 
  TSindices      Specify which timeseries need to be saved
 
  OPTIONS        
  .tsdfconly     Only write the fiducials to the original or a new tsdfc-file
 
  OPTIONS TO BE SPECIFIED AS EXTRA ARGUMENTS (SO NO MISTAKES ARE MADE AND NO HIDDEN OPTIONS ARE LOCATED IN THE OPTIONS ARGUMENT) 
  'overwrite'    Unlock overwriting of tsdf-files (originals: the filename in the fieldfilename are not overwritten)
  'oworiginal'   Unlock overwriting of the original files. If no newfileext is specified the old file will be overwritten
                 With noprompt off a confirmation will be required before replacing the original file.
  'noprompt'	 Disable prompting a savety check before saving the file (In case a file is overwritten)
 
 
  SEE ioReadTSdata
</pre><a name="ref37"></a><br><big><big>ioiInputParameters</big></big><br><br><pre>  FUNCTION [files,indices,options,overwrite,append,noprompt,oworiginal,TSrecord] = ioiInputParameters(param,options)
 
  INTERNAL FUNCTION
 
  DESCRIPTION
  This function processes the data parsed to the general ioReadTS and ioWriteTS.
  The function accepts a cell array in which the input parameters to these functions are
  stored. This function sorts the input and returns the five parameters these io functions
  need.
  This function sorts the files by file type and puts them in a structure. In case files
  are read the function unpacks dfc files and returns only tsdfc files.
 
  INPUT 
  param        input parameter-cell-array
  options      see options
 
  OPTIONS
  .read			check filenames (default)
  .write		skip the check on filenames and do no wildcards
  .readtsdfc    add the contents of the tsdfc-files to the filelist	
  .nocheck      don't check filenames and don't do wildcards
 
  OUTPUT
  files        structured array in which the time series files are sorted
  indices      the indices of the files to be read or the TSindices to be written
  options      the options that are passed to these functions
  overwrite    is one in case overwriting files is allowed
  append       is one in case appending files is allowed
  noprompt     do not prompt before overwriting files
  oworiginal   overwriting the original data is now allowed
  tsRecord    TS records supplied as full data structures
 
  SEE ALSO -
</pre><a name="ref38"></a><br><big><big>ioiReadACQ</big></big><br><br><pre>  FUNCTION TSindices = ioiReadACQ(tsdffilename,[indices],[options])
 
  INTERNAL FUNCTION
  Avoid using this function, as it might change in the future
  Use ioReadTS instead
 
  DESCRIPTION
  This function reads one ACQ file into the TS-structure. The function is based on
  mexReadACQ, but has some additional functionality, for instance it adds data on where
  the data originated from, so when using ioWriteTSDF it knows what filenames to use by
  default. 
  
  INPUT
  acqfilename           A single acq-filename for reading
  indices               In case multiple timeseries are stored, select the ones needed
  options               For future usage
 
  OUTPUT
  TSindices             Indices into the TS-structure where the data has been loaded
 
  SEE ALSO ioReadTS, ioWriteTS
</pre><a name="ref39"></a><br><big><big>ioiReadACQdata</big></big><br><br><pre>  FUNCTION TS = ioiReadACQFdata(tsdffilename,[indices],[options])
 
  INTERNAL FUNCTION
  Avoid using this function, as it might change in the future
  Use ioReadTS instead
 
  DESCRIPTION
  This function reads one ACQ file into a structure (not the TS-structure). The function is based on
  mexReadTSDF, but has some additional functionality, for instance it adds data on where
  the data originated from, so when using ioWriteTSDF it knows what filenames to use by
  default. 
  
  INPUT
  acqfilename          A single acq-filename for reading
  indices               In case multiple timeseries are stored, select the ones needed
  options               For future usage
 
  OUTPUT
  TSindices             Cell with TS-structure where the data has been loaded
 
  SEE ALSO ioReadTS, ioWriteTSDF, ioWriteTS
</pre><a name="ref40"></a><br><big><big>ioiReadFids</big></big><br><br><pre>  FUNCTION ioiReadFids([TSindex],filenames,options)
 
  DESCRIPTION
  This function reads the fiducials from a TSDFC-file and
  from FIDS-files. Even fiducials stored within a TSDF-file are
  processed. The fiducials from external files are read and stored
  in the fids/fidset fields. All the fields will be renumber properly.
 
  INTERNAL FUNCTION
  Please do not use directly but use ioReadTS instead
 
  INPUT
  TSindex        Which timeseries need to be processed
  filenames      What is the filename array (cellarray)
  options        WHich options are specified
 
  OUTPUT -
 
  SEE ALSO ioReadTS
</pre><a name="ref41"></a><br><big><big>ioiReadFidsdata</big></big><br><br><pre>  FUNCTION TS = ioiReadFidsdata(TS,filenames,options)
 
  DESCRIPTION
  This function reads the fiducials from a TSDFC-file and
  from FIDS-files. Even fiducials stored within a TSDF-file are
  processed. The fiducials from external files are read and stored
  in the fids/fidset fields. All the fields will be renumber properly.
 
  INTERNAL FUNCTION
  Please do not use directly but use ioReadTS instead
 
  INPUT
  TSindex        Which timeseries need to be processed
  filenames      What is the filename array (cellarray)
  options        WHich options are specified
 
  OUTPUT -
 
  SEE ALSO ioReadTS
</pre><a name="ref42"></a><br><big><big>ioiReadTSDF</big></big><br><br><pre>  FUNCTION TSindices = ioiReadTSDF(tsdffilename,[indices],[options])
 
  INTERNAL FUNCTION
  Avoid using this function, as it might change in the future
  Use ioReadTS instead
 
  DESCRIPTION
  This function reads one TSDF file into the TS-structure. The function is based on
  mexReadTSDF, but has some additional functionality, for instance it adds data on where
  the data originated from, so when using ioWriteTSDF it knows what filenames to use by
  default. 
  
  INPUT
  tsdffilename          A single tsdf-filename for reading
  indices               In case multiple timeseries are stored, select the ones needed
  options               For future usage
 
  OUTPUT
  TSindices             Indices into the TS-structure where the data has been loaded
 
  SEE ALSO ioReadTS, ioWriteTSDF, ioWriteTS
</pre><a name="ref43"></a><br><big><big>ioiReadTSDFCFiles</big></big><br><br><pre>  FUNCTION TSDFarray = ioReadTSDFCFiles(filenames,options)
 
  DESCRIPTION
  This function reads the file-pointers contained in a TSDFC-file or a DFC-file. The function
  returns the filenames in the order of the TSDFC-files. Within a TSDFC-file the keys are
  alphabetically sorted by the function. If a DFC-file is supplied this file will be translated into 
  TSDFC-filenames first and subsequently they will be processed as an array of TSDFC-files.
  The function is intented to get all the TSDF-filenames to be loaded. Since the default option
  of ioReadTS in case no TSDF-filename is supplied is to read them all, this function is called
  establish what is all.
 
  INPUT
  filenames      A string or cell-array with strings specifying the TSDFC/DFC-files to be processed
 
  OUTPUT
  TSDFarray      The TDSF-files contained in the DFC/TSDFC-files.
 
  SEE ALSO ioReadDFCFiles
</pre><a name="ref44"></a><br><big><big>ioiReadTSDFdata</big></big><br><br><pre>  FUNCTION TS = ioiReadTSDFdata(tsdffilename,[indices],[options])
 
  INTERNAL FUNCTION
  Avoid using this function, as it might change in the future
  Use ioReadTS instead
 
  DESCRIPTION
  This function reads one TSDF file into a structure (not the TS-structure). The function is based on
  mexReadTSDF, but has some additional functionality, for instance it adds data on where
  the data originated from, so when using ioWriteTSDF it knows what filenames to use by
  default. 
  
  INPUT
  tsdffilename          A single tsdf-filename for reading
  indices               In case multiple timeseries are stored, select the ones needed
  options               For future usage
 
  OUTPUT
  TSindices             Cell with TS-structure where the data has been loaded
 
  SEE ALSO ioReadTS, ioWriteTSDF, ioWriteTS
</pre><a name="ref45"></a><br><big><big>ioiUpdateFids</big></big><br><br><pre>  FUNCTION ioiUpdateFids(TSindex,options)
 
  INTERNAL FUNCTION
 
  DESCRIPTION
  This function checks the integrity of the fiducials.
  Only allowing global (length=1) or local fiducial (length=numleads)
  On other configurations the function will fail. As well remapping 
  options are build in and the fiducials will be corrected for this.
  In case no TSDF-data is loaded, the function will check whether only 
  two lengths of fiducias are present, assuming local fiducials to
  have a length other than one, but all need to be the same as they 
  correspond to the same dataset.
  In case of frame renumbering the fiducials will be checked. Any fiducials
  that are out of range will be removed as integrals based on them will not
  be valid. The latter check is only performed in case a number of frames is
  specified, so you will be allowed to load fidsets only
 
  INPUT
  TSindex     The indices of the timeseries to be inspected
  options     Options, specifying lead and frame remapping
  
  OUTPUT -
 
  SEE ALSO - 
</pre>